{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["NumberButtons","id","number","OperatorButtons","operator","sign","App","props","_this","Object","_Users_RyanHussey_Documents_Code_React_quackulator_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_RyanHussey_Documents_Code_React_quackulator_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_RyanHussey_Documents_Code_React_quackulator_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","numberInput","digit","display","state","setState","String","decimalInput","indexOf","clearInput","operatorInput","test","replace","performEquation","regex","audio","play","eval","handleKeyDown","event","key","which","preventDefault","slice","length","document","addEventListener","window","focus","removeEventListener","_this2","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","map","x","onClick","y","src","letter","ref","Component","Boolean","location","hostname","match","ReactDOM","render","react_default","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d32da53b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport ScaleText from \"react-scale-text\";\n\nconst NumberButtons = [\n  {id: \"one\", number: 1},\n  {id: \"two\", number: 2},\n  {id: \"three\", number: 3},\n  {id: \"four\", number: 4},\n  {id: \"five\", number: 5},\n  {id: \"six\", number: 6},\n  {id: \"seven\", number: 7},\n  {id: \"eight\", number: 8},\n  {id: \"nine\", number: 9},\n  {id: \"zero\", number: 0},\n],\n\nOperatorButtons = [\n  {id: \"add\", operator: \"+\", sign: \"+\"},\n  {id: \"subtract\", operator: \"-\", sign: \"-\"},\n  {id: \"multiply\", operator: \"*\", sign: \"x\"},\n  {id: \"divide\", operator: \"/\", sign: \"รท\"},\n]\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n  this.state = {\n    display: \"0\"\n  }\n}\n\nnumberInput = (digit) => {\n  const { display } = this.state //destructuring for this.display.state\n  this.setState({\n    display: display === \"0\" ? String(digit) : display + String(digit)\n  })\n}\n\ndecimalInput = () => {\n  const { display } = this.state;\n  if (display.indexOf(\".\") < 0){ //This ensures that only one decimal dot is used per integer\n  this.setState({\n      display: display + \".\"\n  })\n}\n}\nclearInput = () => {\n  this.setState({\n    display: \"0\"\n  })\n}\noperatorInput = (operator) => {\n  const { display } = this.state\n  let regex = /([+]|[*]|[/]|-)$/;\n   if (regex.test(display)){\n  this.setState({\n    display: display.replace(/.$/, operator)\n  }) //This ensures that multiple math operators won't be entered sequentially\n}\n  this.setState({\n    display: display + operator\n  });\n}\nperformEquation = () => {\n  const { display } = this.state\n  let regex = /([+]|[*]|[/]|-)$/;\n  this.audio.play()\n  if (display===\"0\" | regex.test(display)) {\n    this.setState({\n      display: String(display)\n    })\n  } //prevents errors that occur when trying to perform eval(\"0\") or a statement that ends w/ operator, e.g. eval(\"9+\")\n  else if (display===\"\") {\n    this.clearInput()\n  } //prevents an \"undefined\" message\n  this.setState({\n    display: String(eval(display))\n  }) //evaluates the equation in display\n}\nhandleKeyDown = event => {\n  const { key, which } = event,\n  { display } = this.state;\n\n  if ((/\\d/).test(key)) {\n   this.numberInput(key)\n  }//handling digits\n  else if((/([+]|[*]|[/]|-)/).test(key)) {\n    this.operatorInput(key)\n  }//handling operators\n  else if (key===\"Enter\" | key===\"=\" | which===32) {\n    event.preventDefault()\n    this.performEquation()\n  }//\"=\" key is \"Enter\", \"=\", or \"Space\"\n  else if (key===\"Backspace\") {\n    this.setState({\n      display: String(display.slice(0, display.length-1))\n    })\n  }//removing last character w/ backspace\n} \n\n//lifecycle events for key press:\n\ncomponentDidMount() {\n  document.addEventListener('keydown', this.handleKeyDown) \n  window.focus()//Ensures that the event listener will be active upon page load\n}\n\ncomponentWillUnmount() {\n  document.removeEventListener('keydown', this.handleKeyDown)\n}\n  render() {\n    return (\n      <div className=\"App container\">\n      <div className=\"Outer-grid container\">\n        <div className=\"Display container\">\n        <span id=\"display\">{this.state.display}</span>\n        </div>\n          <div className=\"Numbers container\">\n            {NumberButtons.map( x => <button className=\"number-button z-depth-1\" id={x.id} onClick={() => this.numberInput(x.number)} >{x.number}</button>)}\n            <button className= \"z-depth-1\" id=\"decimal\" onClick={this.decimalInput}>.</button>\n            <button className=\"z-depth-1\" id=\"clear\" onClick={this.clearInput}>Clear</button>\n            {OperatorButtons.map( y => <button className=\"operator-button z-depth-1\" id={y.id} onClick={() => this.operatorInput(y.operator)}>{y.sign}</button>)}\n          </div>\n          <div className=\"Equals container\">\n            <button id=\"equals\" className=\"z-depth-1\" src=\"http://s1download-universal-soundbank.com/mp3/sounds/146.mp3\" onClick={this.performEquation}>=</button>\n            <audio className=\"clip\" id ={this.props.letter} src=\"http://s1download-universal-soundbank.com/mp3/sounds/147.mp3\" ref={ref => this.audio = ref}/>\n          </div>\n        </div>\n        <p>The Quackulator. Code by Ryan Hussey</p>\n      </div>\n    );\n  }\n}\n\n// class ResponsiveText extends Component {\n//   state = ({\n//     textScale: 1\n//   })\n//   componentDidUpdate(){\n//     const node = this.node,\n//     { textScale } = this.state,\n//     { offsetWidth } = node.offsetWidth,\n//     displayWidth = node.offsetParent.offsetWidth; //destructuring\n    \n//     const ratio = offsetWidth / displayWidth; //the text width (in display) divided by the total display width\n\n//     if (ratio===textScale){\n//       return\n//     }; //if the textScale is the same as ratio, no change to state is needed\n//     if (ratio > 1) {\n//       this.setState({\n//         textScale: 1/ratio\n//       }) //if the display width is smaller than text width, the textScale will shrink\n//     } \n//     else if (ratio < 1) {\n//       this.setState({\n//         textScale: 1\n//       }) //if numbers are removed and the ratio becomes less than 1, the textScale needs to be returned to 1\n//     }\n//   }\n//   render(){\n//     return(\n//       <div \n//       {...this.props}\n//       style = {font-size: {40*textScale} //this sets the x and y parameters of transform to the new textScale\n//       ref={ node => this.node = node}>{ this.props.children }</div>\n//     )\n//   }\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}